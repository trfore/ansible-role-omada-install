- name: Install Essential Packages
  ansible.builtin.include_tasks: "{{ ansible_os_family | lower }}.yml"
  when: ansible_os_family == 'Debian'

- name: Check Required Variables
  ansible.builtin.assert:
    that: "{{ req_var }} is defined and {{ req_var }} | length > 0 and {{ req_var }} != None"
    fail_msg: "{{ req_var }} needs to be set for the role to work"
    success_msg: "{{ req_var }} is defined"
    quiet: true
  loop:
    - omada_tar_src
  loop_control:
    loop_var: req_var

- name: Install Omada Dependencies
  ansible.builtin.package:
    name: "{{ omada_dep_pkg }}"
    state: present
  loop: "{{ omada_dependencies }}"
  loop_control:
    loop_var: omada_dep_pkg
  register: package_status
  until: package_status is success
  delay: 10
  retries: 6

- name: Check for jsvc Binary
  block:
    - name: Gather the package facts
      ansible.builtin.package_facts:
        manager: auto

    - name: Check for jsvc Binary
      ansible.builtin.stat:
        path: /usr/bin/jsvc
      register: jsvc_binary

    - name: Error When jsvc Is Missing
      ansible.builtin.fail:
        msg: "Error: jsvc is not present, Omada SDN requires jsvc"
      when:
        - "'jsvc' not in ansible_facts.packages"
        - not jsvc_binary.stat.exists

- name: Check for Omada Binary
  ansible.builtin.stat:
    path: /usr/bin/tpeap
  register: omada_binary

- name: Install Omada SDN Using Tar File
  when: not omada_binary.stat.exists
  block:
    - name: Create a Temporary Directory for Omada Tar File
      ansible.builtin.file:
        path: "{{ omada_tar_dir }}/{{ omada_tar_folder }}"
        state: directory
        mode: "0775"
      register: omada_temp_dir

    - name: Download and Extract Omada Software
      ansible.builtin.unarchive:
        src: "{{ omada_tar_src }}"
        dest: "{{ omada_temp_dir.path }}"
        remote_src: "{{ omada_tar_src_remote }}"
        extra_opts:
          - --strip-components=1
      register: omada_tar

    - name: Run Omada Install Script
      become: true
      ansible.builtin.command: "./install.sh -y"
      args:
        chdir: "{{ omada_tar.dest }}"
        creates: /opt/tplink/EAPController/bin/control.sh
      register: omada_install
      failed_when: omada_install.rc >= 1
      notify:
        - Remove tar folder
        - Enable omada service

- name: Configure Omada to Run as Non-root User
  ansible.builtin.include_tasks: omada-non-root.yml
  when:
    - omada_install.changed # noqa: no-handler
    - omada_non_root
